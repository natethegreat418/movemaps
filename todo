# 📋 MovieMap TODO Checklist

A comprehensive, step-by-step checklist to guide the development of the MovieMap project from setup to deployment.

---

## ✅ Project Initialization

- [x] Create a new GitHub repository
- [x] Initialize project folder structure
- [x] Create frontend project with Vite + React
- [x] Create backend project with Node.js + Express
- [x] Add `.env` files for frontend and backend
- [x] Set up `.gitignore` files
- [x] Add README with project overview

---

## 🛠️ Development Environment Setup

- [x] Install frontend dependencies (React, Mapbox GL, etc.)
- [x] Install backend dependencies (Express, better-sqlite3, dotenv, CORS, Firebase Admin SDK)
- [x] Configure CORS in Express backend
- [x] Set up Vite proxy configuration to handle CORS in development
- [ ] Create `GET /health` route in backend

---

## 🗃️ Database Setup

- [x] Set up Firebase Firestore database
- [x] Create `locations` collection with fields:
  - [x] id (PK)
  - [x] title
  - [x] type (movie/tv)
  - [x] lat/lng coordinates
  - [x] trailer_url
  - [x] imdb_link
  - [x] year
  - [x] location_name
- [x] Create `submissions` collection with fields:
  - [x] All `locations` fields
  - [x] status (pending/approved/rejected)
- [x] Create `moderators` collection with Firebase UID
- [x] Set up development mock Firestore

---

## 🔐 Authentication

- [x] Set up Firebase project
- [x] Enable Firebase Auth with Email/Password or Google Sign-In
- [x] Integrate Firebase Auth in frontend
- [x] Verify Firebase ID tokens in backend middleware
- [x] Restrict admin routes with middleware

---

## 🗺️ Mapbox Frontend

- [x] Add Mapbox GL JS to React app
- [x] Load map centered on a default location
- [x] Create and style pin components
- [x] Show modal with movie details on pin click
- [x] Add filter functionality to toggle between movies and TV shows
- [ ] Add clustering behavior for overlapping pins

---

## 🔄 API Development

- [x] Create `GET /locations` to return approved locations
- [x] Create `POST /submit-location` to accept new submissions
- [x] Validate submission payload
- [x] Create `GET /submissions` for admin review
- [x] Create `PUT /moderate/:id` for approval/rejection

---

## 📝 Community Submission Flow

- [ ] Build a submission form component with fields:
  - [ ] Title
  - [ ] Type
  - [ ] Location name (text)
  - [ ] Map click to select coordinates
  - [ ] Trailer URL
  - [ ] IMDb link
  - [ ] Year
- [ ] Validate inputs in frontend
- [ ] Connect form to existing API endpoint

---

## 🛠️ Admin Interface

- [ ] Create Admin dashboard component/page
- [ ] Implement UI for viewing pending submissions
- [ ] Add "Approve", "Reject", and "Edit" options
- [ ] Connect UI to existing admin API endpoints

---

## 📱 Mobile Optimization

- [x] Make Mapbox map responsive
- [x] Ensure location modals work well on small screens
- [x] Optimize filter controls for mobile
- [ ] Optimize submission form layout for mobile
- [ ] Ensure admin interface is usable on mobile

---

## 🧪 QA and Testing

- [ ] Test form submissions with invalid/missing data
- [x] Test location modals on all screen sizes
- [x] Test filter functionality
- [ ] Test pin clustering behavior
- [ ] Test API endpoints with Postman or equivalent
- [ ] Test Firebase login and admin access control

---

## 🚀 Deployment

- [x] Deploy frontend to Netlify
- [x] Add GitHub repository link to About page
- [ ] Deploy backend to Render or other platform
- [ ] Set production `.env` variables
- [ ] Test full app in production

---

## 📦 Post-Launch

- [ ] Monitor performance and logs
- [ ] Gather user feedback
- [ ] Plan next iteration (e.g. user accounts, filtering, analytics)

---

## 🔧 Data Management

- [x] Create validation for trailer URLs
- [x] Develop script for importing large batches of locations
- [x] Expand location database to 150 entries (75 movies, 75 TV shows)
- [x] Move utility scripts to root-level directory
- [x] Create shell script to streamline database updates
